services:
  frontend:
    build:
      context: ./react
      dockerfile: Dockerfile
    container_name: app_frontend
    environment:
      VITE_API_URL: http://backend:3000
      PORT: "5173"
      HOST: 0.0.0.0
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./react:/app
      - /app/node_modules
    networks:
      - app-network

  backend:
    build:
      context: ./Express.js/mi-primera-api
      dockerfile: Dockerfile
    container_name: app_backend
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: "${PORT}"
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      FRONTEND_URL: http://localhost:5173
    ports:
      - "3000:3000"
      - "5555:5555"  
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./Express.js/mi-primera-api:/app
      - /app/node_modules
    command: sh -c "npx prisma migrate deploy && node prisma/seed.js && npm run dev"
    networks:
      - app-network

  db:
    image: postgres:14-alpine
    container_name: app_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
